<resources>
    <string name="app_name">MaTricks</string>
    <string name="TapButton">Tap Anywhere to Continue</string>
    <string name="Transpose_code">
        
#include&lt;iostream&gt;\n
\n
using namespace std;\n
\n
int row = 3, col = 4;\n
int matrix[3][4] = {{1,2,3,4},{11,21,31,41},\n{12,22,32,42}};\n
\n
void transpose()\n
{\n
    int temp;\n
\n
        for(int i=0;i&lt;row;i++)\n
    {\n
        for(int j=i;j&lt;col;j++)\n
        {\n
            temp = matrix[i][j];\n
            matrix[i][j] = matrix[j][i];\n
            matrix[j][i] = temp;\n
        }\n
    }\n
\n
    temp = col;\n
    col = row;\n
    row = temp;\n
}\n
\n
void display()\n
{\n
    for(int i=0;i&lt;row;i++)\n
    {\n
        for(int j=0;j&lt;col;j++)\n
        {\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";\n
        }\n
\n
        cout&lt;&lt;endl;\n
    }\n
}\n
\n
int main()\n
{\n
    cout&lt;&lt;\"MATRIX : \"&lt;&lt;endl;\n
    display();\n
\n
    transpose();\n
\n
    cout"&lt;&lt;""TRANSPOSE MATRIX : ""&lt;&lt;endl;\n
    display();\n
\n
    return 0;\n
}\n

</string>
    <string name="transpose_heading">Transpose of a Matrix</string>
    <string name="codezigzag">

#include&lt;iostream&gt;	\n
#include&lt;vector&gt;												\n
												\n
using namespace std;												\n
												\n
vector&lt;vector&lt;int&gt;&gt; matrix {{1,2,3,4,5},\n{6,7,8,9,10},{11,12,13,14,15},\n{16,17,18,19,20},{21,22,23,24,25}};	\n
												\n
void display()												\n
{												\n
    for(int i=0;i&lt;matrix.size();i+=1)						\n
    {												\n
        for(int j=0;j&lt;matrix[0].size();j+=1)					\n
        {												\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\t\";				\n
        }												\n
        cout&lt;&lt;endl;												\n
    }												\n
}												\n
												\n
int main()												\n
{												\n
    int j = 0;												\n
												\n
    display();												\n
												\n
    cout&lt;&lt;endl&lt;&lt;endl;							\n
												\n
    for(int i=0;i&lt;matrix.size();i+=1)					\n
    {												\n
        if(i%2 == 0)												\n
        {												\n
            for(int j=0;j&lt;matrix[0].size();j+=1)							\n
            {												\n
                cout&lt;&lt;matrix[i][j]&lt;&lt;\" \";							\n
            }												\n
        }												\n
												\n
        else												\n
        {												\n
            for(int j=matrix[0].size()-1;j>=0;j-=1)								\n
            {												\n
                cout&lt;&lt;matrix[i][j]&lt;&lt;\" \";				\n
            }												\n
        }												\n
												\n
    }												\n
												\n
    return 0;												\n
}												\n
												\n
</string>
    <string name="ZigZag_heading">Zig Zag Traversal</string>
    <string name="Spiral_heading">Print Spiral</string>
    <string name="Spiralcode">
        
#include&lt;iostream&gt;				\n
#include&lt;vector&gt;												\n
												\n
using namespace std;												\n
												\n
vector&lt;vector&lt;int>> matrix {{1,2,3,4,5},\n{11,21,31,41,51},{12,22,32,42,52},{121,222,323,425,452},{10,20,30,40,50}};		\n
												\n
void transpose()												\n
{												\n
    int temp;												\n
												\n
    for(int i=0;i&lt;matrix.size();i++)				\n
    {												\n
        for(int j=i;j&lt;matrix[0].size();j++)							\n
        {												\n
            temp = matrix[i][j];					\n
            matrix[i][j] = matrix[j][i];					\n
            matrix[j][i] = temp;					\n
        }												\n
    }												\n
												\n
}												\n
												\n
void display()												\n
{												\n
    for(int i=0;i&lt;matrix.size();i++)						\n
    {												\n
        for(int j=0;j&lt;matrix[0].size();j++)			\n
        {												\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";							\n
        }												\n
        cout&lt;&lt;endl;												\n
    }												\n
}												\n
												\n
void rotate90()												\n
{												\n
    int temp;												\n
												\n
    transpose();												\n
												\n
    for(int i=0;i&lt;matrix.size();i++)												\n
    {												\n
        for(int j=0;j&lt;matrix[0].size()/2;j++)				\n
        {												\n
            temp = matrix[i][j];												\n
            matrix[i][j] = matrix[i][matrix[0].size() - j - 1];				\n
            matrix[i][matrix[0].size() - j - 1] = temp;			\n
        }												\n
    }												\n
												\n
}												\n
												\n
void printLine()												\n
{												\n
    for(int i=0;i&lt;matrix[0].size()-1;i++)							\n
    {												\n
        cout&lt;&lt;matrix[0][i]&lt;&lt;" -> ";							\n
    }												\n
												\n
    for(int i=0;i&lt;matrix.size();i++)								\n
    {												\n
        cout&lt;&lt;matrix[i][matrix[i].size()-1]&lt;&lt;\" -> \";						\n
        matrix[i].erase(matrix[i].begin() + matrix[i].size()-1, matrix[i].begin() + matrix[i].size());		\n
    }												\n
												\n
    matrix.erase(matrix.begin(), matrix.begin() + 1);							\n
												\n
}												\n
												\n
int main()												\n
{												\n
    cout&lt;&lt;\"MATRIX : \"&lt;&lt;endl;												\n
    display();												\n
												\n
    cout&lt;&lt;endl&lt;&lt;\"SPIRAL PRINTING : \"&lt;&lt;endl;					\n
												\n
    while(matrix.size() != 0)												\n
    {												\n
        printLine();												\n
        rotate90();												\n
        rotate90();												\n
    }												\n
												\n
    return 0;												\n
}												\n
												\n
        
    </string>

    <string name="antiSpiral_Heading">Printing Anti-Spiral</string>
    <string name="antiSpiralcode">

#include&lt;iostream&gt;										\n
#include&lt;vector&gt;										\n
#include&lt;stack&gt;										\n
										\n
using namespace std;										\n
										\n
vector&lt;vector&lt;int&gt;&gt; matrix {{1,2,3,4,5},\n{6,7,8,9,10},{11,12,13,14,15},{16,17,18,19,20},{21,22,23,24,25}};\n	\n
stack &lt;int&gt; stackSpiral;				\n
										\n
void transpose()										\n
{										\n
    int temp;										\n
										\n
    for(int i=0;i&lt;matrix.size();i++)					\n
    {										\n
        for(int j=i;j&lt;matrix[0].size();j++)					\n
        {										\n
            temp = matrix[i][j];						\n
            matrix[i][j] = matrix[j][i];				\n
            matrix[j][i] = temp;			\n
        }										\n
    }										\n
										\n
}										\n
										\n
void display()										\n
{										\n
    for(int i=0;i&lt;matrix.size();i++)							\n
    {										\n
        for(int j=0;j&lt;matrix[0].size();j++)						\n
        {										\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";							\n
        }										\n
        cout&lt;&lt;endl;							\n
    }										\n
}										\n
										\n
void rotate90()										\n
{										\n
    int temp;										\n
										\n
    transpose();										\n
										\n
    for(int i=0;i&lt;matrix.size();i++)							\n
    {										\n
        for(int j=0;j&lt;matrix[0].size()/2;j++)							\n
        {										\n
            temp = matrix[i][j];								\n
            matrix[i][j] = matrix[i][matrix[0].size() - j - 1];							\n
            matrix[i][matrix[0].size() - j - 1] = temp;								\n
        }										\n
    }										\n
										\n
}										\n
										\n
void printLine()										\n
{										\n
    for(int i=0;i&lt;matrix[0].size()-1;i++)										\n
    {										\n
        stackSpiral.push(matrix[0][i]);										\n
    }										\n
										\n
    for(int i=0;i&lt;matrix.size();i++)										\n
    {										\n
        stackSpiral.push(matrix[i][matrix[i].size()-1]);										\n
        matrix[i].erase(matrix[i].begin() + matrix[i].size()-1, matrix[i].begin() + matrix[i].size());		\n
    }										\n
										\n
    matrix.erase(matrix.begin(), matrix.begin() + 1);										\n
										\n
}										\n
										\n
int main()										\n
{										\n
    cout&lt;&lt;\"MATRIX : \"&lt;&lt;endl;										\n
    display();										\n
										\n
    cout&lt;&lt;endl&lt;&lt;\"SPIRAL PRINTING : \"&lt;&lt;endl;									\n
										\n
    while(matrix.size() != 0)										\n
    {										\n
        printLine();										\n
        rotate90();										\n
        rotate90();										\n
    }										\n
										\n
    cout&lt;&lt;endl;										\n
										\n
    while(stackSpiral.empty()!= true)										\n
    {										\n
        cout&lt;&lt;stackSpiral.top()&lt;&lt;\" -> \";									\n
        stackSpiral.pop();										\n
    }										\n
										\n
    return 0;										\n
}										\n
										\n

    </string>

    <string name="rotate_heading">Rotate Matrix</string>
    <string name="rotatecode">

#include&lt;iostream&gt;								\n
#include&lt;vector&gt;								\n
								\n
using namespace std;								\n
								\n
int row = 4, col = 5;								\n
int matrix[4][5] = {{1,2,3,4,5},{11,21,31,41,51},{12,22,32,42,52},{121,222,323,425,452},};		\n
								\n
void transpose()								\n
{								\n
    int temp;								\n
								\n
    for(int i=0;i&lt;row;i++)								\n
    {								\n
        for(int j=i;j&lt;col;j++)								\n
        {								\n
            temp = matrix[i][j];								\n
            matrix[i][j] = matrix[j][i];								\n
            matrix[j][i] = temp;								\n
        }								\n
    }								\n
								\n
    temp = col;								\n
    col = row;								\n
    row = temp;								\n
}								\n
								\n
void display()								\n
{								\n
    for(int i=0;i&lt;row;i++)								\n
    {								\n
        for(int j=0;j&lt;col;j++)								\n
        {								\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";								\n
        }								\n
								\n
        cout&lt;&lt;endl;								\n
    }								\n
}								\n
								\n
int main()								\n
{								\n
    int temp;								\n
    cout&lt;&lt;\"MATRIX : \"&lt;&lt;endl;							\n
    display();								\n
								\n
    transpose();								\n
								\n
    cout&lt;&lt;endl&lt;&lt;\"TRANSPOSE MATRIX : \"&lt;&lt;endl;							\n
    display();								\n
								\n
    for(int i=0;i&lt;row;i++)								\n
    {								\n
        for(int j=0;j&lt;col/2;j++)								\n
        {								\n
            temp = matrix[i][j];								\n
            matrix[i][j] = matrix[i][col - j - 1];								\n
            matrix[i][col - j - 1] = temp;								\n
        }								\n
    }								\n
								\n
    cout&lt;&lt;endl;								\n
    cout&lt;&lt;\"ROTATED MATRIX : \";								\n
    cout&lt;&lt;endl;								\n
								\n
    display();								\n
								\n
    return 0;								\n
}								\n


    </string>
    <string name="see_list_button">see list</string>
    <string name="try_random_button">try random</string>
    <string name="rotate_90_button">Rotate 90</string>
    <string name="anti_spiral_printing_button">Anti-Spiral Printing</string>
    <string name="spiral_printing_button">Spiral Printing</string>
    <string name="zig_zag_printing_button">Zig-Zag Printing</string>
    <string name="transpose_button">Transpose</string>
    <string name="back_button">Back</string>
    <string name="front_button">Next</string>
    <string name="button_2">Button</string>
    <string name="button_3">Z Printing</string>
    <string name="i_m_a_programmer_text">I\'m a PROGRAMMER…</string>
    <string name="i_want_learn_more_text">I\'m a LEARNER…</string>
    <string name="tell_us_who_you_are_heading">Who You Are</string>
    <string name="random_description">{ } : Try a random topic. Click on the button to see today\'s bit of Ma-t-ricks code</string>
    <string name="see_list">{ } : Choose your topic. Click on the button to see a list of Ma-t-ricks code</string>
    <string name="choose_heading">Choose</string>
    <string name="coder_meta">[ ] : I\'m looking for codes and coding approaches for matrix related problems</string>
    <string name="nerd_meta">[ ] : I want to learn more about matrices and their applications</string>
    <string name="approach_button">Tell me the approach</string>
    <string name="rotateCode">Hi</string>
    <string name="hint_code_button">Maybe, a hint will do !</string>
    <string name="hide_code_button">Hide Code</string>
    <string name="spiral_code">Hi</string>
    <string name="code_zigzag">Hi</string>
    <string name="codeAntiSpiral">Hi</string>
    <string name="code_Transpose">Hi</string>
    <string name="code_ZPrinting">Hi</string>
    <string name="z_printing_heading">Z-Printing</string>
    <string name="ZPcode">

#include&lt;iostream&gt;										\n
#include&lt;vector&gt;										\n
										\n
using namespace std;										\n
										\n
vector &lt;vector &lt;int&gt;&gt; matrix{{1,2,3,4,5},\n{6,7,8,9,10},{11,12,13,14,15},{16,17,18,19,20},\n{21,22,23,24,25}};	\n
										\n
int main()										\n
{										\n
    int i=0;										\n
    int j=-1;										\n\n
    int lastRow =\n matrix[ matrix.size() - 1 ].size() - 1;										\n
										\n
    /* You can however index the row with \'0\'\n as well since we consider square matrices */	\n
										\n
    for(int r=0; r&lt;matrix.size(); r++)										\n
    {										\n
        for(int c = 0; c&lt;matrix[0].size(); c++)										\n
        {										\n
            cout&lt;&lt;matrix[r][c]&lt;&lt;\"\\t\";										\n
        }										\n
        cout&lt;&lt;endl;										\n
    }										\n
    cout&lt;&lt;endl;										\n
										\n
										\n
    for(i=0;i&lt;matrix[0].size();i++)										\n
    {										\n
        cout&lt;&lt;matrix[0][i]&lt;&lt;\" \";										\n
    }										\n
										\n
    while(i>0)										\n
    {										\n
        cout&lt;&lt;matrix[j+=1][i-=1]&lt;&lt;\" \";										\n
    }										\n
										\n
    for(int c=1; c &lt; lastRow + 1 ; c++)										\n
    {										\n
        cout&lt;&lt;matrix[lastRow][c]&lt;&lt;\" \";										\n
    }										\n
										\n
    cout&lt;&lt;endl;										\n
										\n
    return 0;										\n
}										\n
										\n
    </string>
    <string name="back_button_random">I think I\'ll switch</string>
    <string name="welcome1">Hi, I\'ll get you acquainted with the setup</string>
    <string name="welcome2">Great to see you back again !</string>
    <string name="see_assistant_button">See Assistant</string>
    <string name="message_headertouch">{ } : And, you can move back to the previous page by clicking once in the header</string>

    <string name="majorswapheading">Swap Major Diagonal</string>
    <string name="majordiagonalprobelem">Hi</string>
    <string name="majorcode">

#include&lt;iostream&gt;						\n
#include&lt;vector&gt;							\n
							\n
using namespace std;							\n
							\n
const int n = 4;							\n
int matrix[n][n];							\n
							\n
swapMajorDiagonal()							\n
{							\n
    int temp;							\n
							\n
    for(int i=0;i&lt;n/2;i++)							\n
    {							\n
        temp = matrix[i][i];							\n
        matrix[i][i] = matrix[n-i-1][n-i-1];							\n
        matrix[n-i-1][n-i-1] = temp;							\n
    }							\n
}							\n
							\n
void display()							\n
{							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        for(int j=0;j&lt;n;j++)							\n
        {							\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";							\n
        }							\n
        cout&lt;&lt;endl;							\n
    }							\n
							\n
    cout&lt;&lt;endl&lt;&lt;endl;							\n
							\n
}							\n
							\n
int main()							\n
{							\n
    int counter = 0;							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        for(int j=0;j&lt;n;j++)							\n
        {							\n
            matrix[i][j] = counter++;							\n
        }							\n
    }							\n
							\n
    /* Instead of counter you can also use ( n * i ) + j */							\n
							\n
    /* Since, the index is a linear combination of rows and columns */				\n
							\n
    /* For 3x3 matrix, index \'5\' comes in the row 1, column 2 */							\n
							\n
    /* 5 = ( n = 3 )*( i = 1 ) + ( j = 2 ) */							\n
							\n
    /* We do not do it here just for easier comprehension */							\n
							\n
    cout&lt;&lt;\"GIVEN MATRIX : \"&lt;&lt;endl&lt;&lt;endl;							\n
							\n
    display();							\n
							\n
    swapMajorDiagonal();							\n
							\n
    cout&lt;&lt;\"MAJOR DIAGONAL : \"&lt;&lt;endl&lt;&lt;endl;							\n
							\n
    display();							\n
							\n
    return 0;							\n
}							\n

    </string>

    <string name="minorswapheading">Swap Minor Diagonal</string>
    <string name="minordiagonalproblem">Hi</string>
    <string name="minorcode">

#include&lt;iostream&gt;							\n
#include&lt;vector&gt;						\n
							\n
using namespace std;							\n
							\n
const int n = 4;							\n
int matrix[n][n];							\n
							\n
swapMinorDiagonal()							\n
{							\n
    int temp;							\n
							\n
    for(int i=0;i&lt;n/2;i++)							\n
    {							\n
        temp = matrix[i][n-i-1];							\n
        matrix[i][n-i-1] = matrix[n-i-1][i];							\n
        matrix[n-i-1][i] = temp;							\n
    }							\n
}							\n
							\n
void display()							\n
{							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        for(int j=0;j&lt;n;j++)							\n
        {							\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";							\n
        }							\n
        cout&lt;&lt;endl;							\n
    }							\n
							\n
    cout&lt;&lt;endl&lt;&lt;endl;							\n
							\n
}							\n
							\n
int main()							\n
{							\n
    int counter = 0;							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        for(int j=0;j&lt;n;j++)							\n
        {							\n
            matrix[i][j] = counter++;							\n
        }							\n
    }							\n
							\n
    /* Instead of counter you can also use ( n * i ) + j */							\n
							\n
    /* Since, the index is a linear combination of rows and columns */							\n
							\n
    /* For 3x3 matrix, index \'5\' comes in the row 1, column 2 */							\n
							\n
    /* 5 = ( n = 3 )*( i = 1 ) + ( j = 2 ) */							\n
							\n
    /* We do not do it here just for easier comprehension */							\n
							\n
    cout&lt;&lt;\"GIVEN MATRIX \"&lt;&lt;endl&lt;&lt;endl;							\n
							\n
    display();							\n
							\n
    swapMinorDiagonal();							\n
							\n
    cout&lt;&lt;\"MINOR DIAGONAL : \"&lt;&lt;endl&lt;&lt;endl;							\n
							\n
    display();							\n
							\n
    return 0;							\n
}							\n
        
    </string>


    <string name="swapheading">Swap Diagonals</string>
    <string name="diagonalproblem">Hi</string>
    <string name="swap_diagonals">

#include&lt;iostream&gt;							\n
#include&lt;vector&gt;							\n
							\n
using namespace std;							\n
							\n
const int n = 5;							\n
int matrix[n][n];							\n
							\n
swapDiagonal()							\n
{							\n
    int temp;							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        temp = matrix[i][n-i-1];							\n
        matrix[i][n-i-1] = matrix[i][i];							\n
        matrix[i][i] = temp;							\n
    }							\n
}							\n
							\n
void display()							\n
{							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        for(int j=0;j&lt;n;j++)							\n
        {							\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";							\n
        }							\n
        cout&lt;&lt;endl;							\n
    }							\n
							\n
    cout&lt;&lt;endl&lt;&lt;endl;							\n
							\n
}							\n
							\n
int main()							\n
{							\n
    int counter = 0;							\n
							\n
    for(int i=0;i&lt;n;i++)							\n
    {							\n
        for(int j=0;j&lt;n;j++)							\n
        {							\n
            matrix[i][j] = counter++;							\n
        }							\n
    }							\n
							\n
    /* Instead of counter you can also use ( n * i ) + j */							\n
							\n
    /* Since, the index is a linear combination of rows and columns */							\n
							\n
    /* For 3x3 matrix, index \'5\' comes in the row 1, column 2 */							\n
							\n
    /* 5 = ( n = 3 )*( i = 1 ) + ( j = 2 ) */							\n
							\n
    /* We do not do it here just for easier comprehension */							\n
							\n
    cout&lt;&lt;"GIVEN MATRIX "&lt;&lt;endl&lt;&lt;endl;							\n
							\n
    display();							\n
							\n
    swapDiagonal();							\n
							\n
    cout&lt;&lt;\"SWAPPING DIAGONALS : \"&lt;&lt;endl&lt;&lt;endl;							\n
							\n
    display();							\n
							\n
    return 0;							\n
}							\n
							\n
    </string>

    <string name="oddmagicsquareheading">Odd Magic Square</string>
    <string name="problemoddmagicsquare">Hi</string>
    <string name="oddmagicsquarecode">

        #include&lt;iostream&lt;		\n
#include&lt;vector&gt;					\n
					\n
using namespace std;					\n
					\n
const int n=5;					\n
int magicSquare[n][n];					\n
					\n
void display()					\n
{					\n
					\n
    for(int i=0;i&lt;n;i++)					\n
    {					\n
        for(int j=0;j&lt;n;j++)					\n
        {					\n
            cout&lt;&lt;magicSquare[i][j]&lt;&lt;\"\\t\";		\n
        }					\n
        cout&lt;&lt;endl;					\n
    }					\n
					\n
}					\n
					\n
int main()					\n
{					\n
    int counter = 1;					\n
    int row = n/2;					\n
    int col = n-1;					\n
					\n
    magicSquare[row][col] = counter;			\n
					\n
    while(true)					\n
    {					\n
        row -= 1;					\n
        col += 1;					\n
					\n
        if(row == -1 &amp;&amp; col == n)		\n
        {					\n
            row = 0;					\n
            col = n-2;					\n
        }					\n
					\n
        else if(row == -1)					\n
        {					\n
            row = n-1;					\n
        }					\n
					\n
        else if(col == n)					\n
        {					\n
            col = 0;					\n
        }					\n
					\n
        else if(magicSquare[row][col] != 0)			\n
        {					\n
            col -=2;					\n
            row += 1;					\n
        }					\n
					\n
        counter++;					\n
					\n
        if(counter&gt;n*n)					\n
        {					\n
            break;					\n
        }					\n
					\n
        magicSquare[row][col] = counter;					\n
					\n
    }					\n
					\n
    display();					\n
    cout&lt;&lt;endl;					\n
					\n
    return 0;					\n
}					\n
					\n

    </string>

    <string name="maxSumPathNCHeading">Maximum Sum Path</string>
    <string name="problemMaxSumPathNC">Hi</string>
    <string name="maxSumPathNCcode">

#include&lt;iostream&gt;										\n
#include&lt;vector&gt;										\n
										\n
using namespace std;										\n
										\n
vector &lt;vector &lt;int&gt;&gt; pathMatrix {{12,3,45,2,56},{132,2,8,6,0},{2,67,0,11,9},{42,7,10,1,19},{20,6,8,14,123}};										\n
										\n
vector &lt;int&gt; maximumWeightPath;										\n
										\n
void printMatrix()										\n
{										\n
    for(int i=0;i&lt;pathMatrix.size();i++)										\n
    {										\n
        for(int j=0;j&lt;pathMatrix[i].size();j++)										\n
        {										\n
            cout&lt;&lt;pathMatrix[i][j]&lt;&lt;\" \";										\n
        }										\n
        cout&lt;&lt;endl;										\n
    }										\n
										\n
    cout&lt;&lt;endl&lt;&lt;endl;										\n
}										\n
										\n
void printPath()										\n
{										\n
    int pathWeight = 0;										\n
										\n
    cout&lt;&lt;\"START -&gt; \";										\n
										\n
    for(int i=0;i&lt;maximumWeightPath.size();i++)										\n
    {										\n
        cout&lt;&lt;maximumWeightPath[i]&lt;&lt;\" -&gt; \";										\n
        pathWeight += maximumWeightPath[i];										\n
    }										\n
										\n
    cout&lt;&lt;\"END\";										\n
										\n
    cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;\"MAXIMUM PATH WEIGHT : \"&lt;&lt;pathWeight;										\n
}										\n
										\n
int main()										\n
{										\n
    int maximumWeight = 0;										\n
										\n
    printMatrix();										\n
										\n
    for(int i=0;i&lt;pathMatrix.size();i++)										\n
    {										\n
        maximumWeight = 0;										\n
										\n
        for(int j=0;j&lt;pathMatrix[i].size();j++)										\n
        {										\n
            if(maximumWeight&lt;pathMatrix[i][j])										\n
            {										\n
                maximumWeight = pathMatrix[i][j];										\n
            }										\n
        }										\n
										\n
        maximumWeightPath.push_back(maximumWeight);										\n
										\n
    }										\n
										\n
    printPath();										\n
										\n
    return 0;										\n
}										\n
										\n
        
    </string>

    <string name="stochastic_matrix_heading">Stochastic Matrix</string>
    <string name="stochastic_matrix_problem">Hi</string>
    <string name="stochastic_matrix_code">

#include&lt;iostream&gt;								\n
#include&lt;vector&gt;								\n
								\n
using namespace std;								\n
								\n
vector &lt;vector &lt;float&gt;&gt; matrix {{1,0,0},{0.1,0.4,0.5},{0,0.1,0.9}};								\n
								\n
void displayMatrix()								\n
{								\n
    for(int i=0;i&lt;matrix.size();i++)								\n
    {								\n
        for(int j=0;j&lt;matrix[i].size();j++)								\n
        {								\n
            cout&lt;&lt;matrix[i][j]&lt;&lt;\"\\t\";								\n
        }								\n
        cout&lt;&lt;endl;								\n
    }								\n
    cout&lt;&lt;endl&lt;&lt;endl;								\n
}								\n
								\n
int main()								\n
{								\n
    bool isRight = true;								\n
    int sum = 0;								\n
								\n
    displayMatrix();								\n
								\n
								\n
    for(int i=0; i&lt;matrix.size(); i++)								\n
    {								\n
        sum = 0;								\n
								\n
        /* Has to be a square matrix */								\n
								\n
         if(matrix.size() != matrix[i].size())								\n
            {								\n
                isRight = false;								\n
                break;								\n
            }								\n
								\n
         /* Sum has to be a  one, values non-negative and not greater than one */								\n
								\n
								\n
        for(int j=0; j&lt;matrix[i].size(); j++)								\n
        {								\n
            if(matrix[i][j] &lt; 0 || matrix[i][j] &gt; 1)								\n
            {								\n
                isRight = false;								\n
                break;								\n
            }								\n
								\n
            sum += matrix[i][j];								\n
        }								\n
								\n
        if(sum != 1)								\n
        {								\n
            isRight = false;								\n
            break;								\n
        }								\n
								\n
        if(isRight == false)								\n
        {								\n
            break;								\n
        }								\n
								\n
    }								\n
								\n
    if(isRight == true)								\n
    {								\n
        cout&lt;&lt;\"IS A RIGHT STOCHASTIC MATRIX\";								\n
    }								\n
    else								\n
    {								\n
        cout&lt;&lt;\"NOT A RIGHT STOCHASTIC MATRIX\";								\n
    }								\n
								\n
    return 0;								\n
}								\n


    </string>

    <string name="stochastic_content">

        The \'<b>Stochastic Matrix</b>\' otherwise called the <b>Probability Matrix</b> or the <b>Markov Matrix</b>,
        is one which has non-negative real valued entries.\n
        \n
        Based on the sum, these matrices may be classified into three : \n
        \n
        1. Right Stochastic Matrix ( <i>Row-wise sum == 1</i> )\n\n
        2. Left Stochastic Matrix ( <i>Column-wise sum == 1</i> )\n\n
        3. Doubly Stochastic Matrix ( <i>Row-wise sum == 1 and column-wise sum == 1</i> )\n\n
        \n
        As the name suggests, the entries of the matrix, are probabilities, hence they have to
        be in the range [0 - 1], inclusive.\n
        \n
        \n
        <b>Extra :</b>\n
        \n
        1. According to the <b>Sinkhorn\'s Theorem</b>, any matrix with strictly positive values can
        be made Doubly Stochastic by pre- and post- multiplication with diagonal matrices.\n
        \n
        2. The product of two Doubly Stochastic matrices is again a Doubly Stochastic matrix.\n

    </string>

    <string name="hessenberg_heading">Hessenberg Matrix</string>
    <string name="hessenberg_content">hi</string>

    <string name="idempotent_matrix_button">Idempotent Matrix</string>
    <string name="idempotent_content">



    </string>

    <string name="involutory_matrix_button">Involutory Matrix</string>
    <string name="involutory_content">hi</string>

    <string name="orthogonal_matrix_button">Orthogonal Matrix</string>
    <string name="orthogonal_content">hi</string>

    <string name="binary_matrix_button">Binary Matrix</string>
    <string name="binary_content">hi</string>

    <string name="sparse_matrix_button">Sparse Matrix</string>
    <string name="sparse_content">hi</string>
    <string name="switchNerd">Check out theoritcal content under \'Learner\'. Just click switch at the top of this screen</string>

    <string name="trace_matrix_button">Trace of Matrix</string>
    <string name="trace_matrix_content">



    </string>

    <string name="matrixsum_button">Sum of Matrices</string>
    <string name="matrixsum_content">

        The following points must be kept in mind while carrying out the addition of matrices.\n
        \n
        1. The <b>order</b> of both the matrices have to be the <b>same</b>.\n
        \n
        2. The summation of matrices is carried out such that the element in the resultant matrix,
        is formed by the summation of the elements in the corresponding indices of the matrices being added.\n
        \n
        i.e. Let the matrices \'A\' and \'B\' be added in oder to form a matrix \'C\'. Then, the
        order of matrices \'A\', \'B\' and \'C\' are the same.\n
        \n
        And, the sum of the element in the index ( i, j ) of matrix \'A\' is added with that of \'B\' to
        produce the element in the ( i, j ) index of the matrix \'C\'.\n
        \n
        3. Addition of matrices is also commutative.\n\ni.e. A + B = B + A\n
        \n

    </string>

    <string name="sum_dets_button">Sum of Determinants</string>
    <string name="sum_dets_content">



    </string>

    <string name="symmetricMatrix_button">Symmetric Matrix</string>
    <string name="symmetricMatrix_content">

        A <b>Symmetric Matrix</b> is any matrix, which is the same even after taking the transpose.\n
        \n
        Mathematically,\n
        \n
        If \'A\' is a matrix, then, A == transpose( A ).\n
        \n
        In other words, we can even say that the matrix has a mirror as its diagonal.\n
        \n
        Some interesting points regarding Symmetric Matrices :\n
        \n
        1. If the Symmetric Matrix is Orthogonal, then the square of the matrix is an Identity Matrix.
        Hence, the determinant of the matrix will be \'1\'.

    </string>

    <string name="skewsymmetricMatrix_button">Skew-Symmetric Matrix</string>
    <string name="skewsymmetricMatrix_content">

        A <b>Skew-Symmetric Matrix</b> is any matrix, which is equal to the negative of it\'s transpose.\n
        \n
        Mathematically,\n
        \n
        If \'A\' is a matrix, then, A == (-1) * transpose( A ).\n
        \n
        In other words, we can even say that the matrix has a mirror as its diagonal.\n
        \n
        Some interesting points regarding Skew-Symmetric Matrices :\n
        \n
        1. If the Symmetric Matrix is Orthogonal, then the square of the matrix is \'-1\' times the Identity Matrix.
        Hence, the determinant of the matrix will be \'-1\'.\n
        \n
        2. The diagonal entries of such a matrix is necessarily \'0\'. Hence, the trace of the matrix os \'0\'.

    </string>
    <string name="matrices_intution_heading">Matrices : Intution</string>
    <string name="matrix_intution_content">



    </string>

    <string name="determinants_intution_heading">Determinants : Intution</string>
    <string name="det_intution_content">



    </string>

    <string name="multiplying_matrices_heading">Multiplying Matrices</string>
    <string name="mult_matrix_content">

        <b>Matrix Multiplication</b> is often.

    </string>

    <string name="multiplying_determinants_heading">Multiplying Determinants</string>
    <string name="mult_dets_content">



    </string>

</resources>
